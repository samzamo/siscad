import csv
import sqlite3
import os
import unicodedata

def limpar_texto(texto):
    if not texto:
        return ''
    texto = texto.upper().strip()
    texto = unicodedata.normalize('NFKD', texto).encode('ASCII', 'ignore').decode('ASCII')
    return texto

# üìÇ Caminhos
CAMINHO_CSV = r'C:/Users/SAM/Desktop/meu_site/planilha/nomes.csv'  # ajuste conforme necess√°rio
BANCO_DADOS = 'banco.db'

# ‚úÖ Verifica se o CSV existe
if not os.path.exists(CAMINHO_CSV):
    print(f"‚ö†Ô∏è Arquivo CSV n√£o encontrado: {CAMINHO_CSV}")
    exit()

# üîó Conecta ao banco
conn = sqlite3.connect(BANCO_DADOS)
cursor = conn.cursor()

# üìã Garante que as colunas existem
novos_campos = {
    'municipio': 'TEXT',
    'bairro': 'TEXT',
    'anotacoes': 'TEXT',
    'octopus': 'TEXT'
}
cursor.execute("PRAGMA table_info(pessoas)")
colunas_existentes = [c[1] for c in cursor.fetchall()]
for campo, tipo in novos_campos.items():
    if campo not in colunas_existentes:
        cursor.execute(f"ALTER TABLE pessoas ADD COLUMN {campo} {tipo}")
        print(f"‚úÖ Coluna '{campo}' adicionada.")
    else:
        print(f"‚ÑπÔ∏è Coluna '{campo}' j√° existe.")

# üì• Processa o CSV
with open(CAMINHO_CSV, newline='', encoding='utf-8') as arquivo:
    leitor = csv.DictReader(arquivo, delimiter=';')
    print(f"\nüîç Cabe√ßalhos detectados: {leitor.fieldnames}\n")

    for linha in leitor:
        try:
            nome = limpar_texto(linha.get('NOME') or linha.get('\ufeffNOME'))
            apelido = limpar_texto(linha.get('APELIDO'))
            municipio = limpar_texto(linha.get('MUNICIPIO'))
            bairro = limpar_texto(linha.get('BAIRRO'))
            anotacoes = linha.get('ANOTACOES', '').strip()
            octopus = limpar_texto(linha.get('OCTOPUS'))

            # üîç Localiza por nome
            cursor.execute("SELECT id FROM pessoas WHERE nome = ?", (nome,))
            resultado = cursor.fetchone()

            if resultado:
                pessoa_id = resultado[0]
                cursor.execute('''
                    UPDATE pessoas SET 
                        municipio = ?, bairro = ?, anotacoes = ?, octopus = ?
                    WHERE id = ?
                ''', (municipio, bairro, anotacoes, octopus, pessoa_id))
                print(f"üîÑ Atualizado: {nome} ({apelido})")
            else:
                print(f"‚ö†Ô∏è Registro n√£o encontrado: {nome} / {apelido}")

        except Exception as e:
            print(f"‚ùå Erro ao processar linha: {linha}")
            print(f"üîß Detalhe: {e}")

# üßæ Finaliza
conn.commit()
conn.close()
print("\nüéâ Atualiza√ß√£o conclu√≠da com sucesso!")
